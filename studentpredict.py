# -*- coding: utf-8 -*-
"""studentpredict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tx6PEJVvd-3ehBx2clkgEc-2-IWUG0Nh
"""

import os
from zipfile import ZipFile

# Assurez-vous que vous avez déplacé votre 'kaggle.json' au bon endroit
os.environ['KAGGLE_CONFIG_DIR'] = os.path.expanduser('~/.kaggle')

# Téléchargement du dataset
dataset = "syedfaizanalii/predict-students-dropout-and-academic-success"
os.system(f'kaggle datasets download -d {dataset}')

# Extraction du fichier ZIP dans le dossier courant
zip_file = dataset.split('/')[-1] + '.zip'
with ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall('.')  # Extraction dans le dossier courant

print("Téléchargement et extraction réussis dans le dossier courant.")

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

"""# Nouvelle section"""

# Chemin du fichier CSV
file_path = 'Predict Student Dropout and Academic Success.csv'

# Lire le fichier CSV avec pandas
df = pd.read_csv(file_path, sep=';')

# Afficher les premières lignes du DataFrame
df.head(5)

df.info()

# Check for duplicates across all columns
duplicates_all_cols = df[df.duplicated()]

# Check for duplicates in specific columns (e.g., 'col1', 'col2')
#duplicates_subset = df[df.duplicated(subset=['col1', 'col2'])]

# Print the results
if duplicates_all_cols.empty:
  print("No duplicates found across all columns.")
else:
  print("Duplicates found across all columns:")
  print(duplicates_all_cols)

# Check for missing values in the entire DataFrame
missing_values = df.isnull().sum()

# Print the results
print(missing_values)

# Compter le nombre de diplômés et de décrocheurs
graduation_counts = df['Target'].value_counts()

# Visualisation : Histogramme des résultats
plt.figure(figsize=(8, 6))
#sns.countplot(data=df, x='Target', palette='viridis')
sns.countplot(data=df, x='Target', hue='Target', palette='viridis')

plt.title('Distribution des résultats (Diplômé vs Décrocheur)')
plt.xlabel('Statut')
plt.ylabel('Nombre d\'étudiants')
plt.xticks(rotation=45)
plt.show()

# Assuming your DataFrame is named 'df' and the target column is 'Target'
graduation_counts = df['Target'].value_counts()

# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(graduation_counts, labels=graduation_counts.index, autopct='%1.1f%%', startangle=90, colors=['green','skyblue', 'lightcoral'])
plt.title('Distribution des résultats (Diplômé vs Décrocheur)')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Assuming your DataFrame is named 'df'
numerical_features = ['Previous qualification (grade)', 'Unemployment rate', 'Inflation rate', 'GDP']
central_tendency = df[numerical_features].agg(['mean', 'median', 'std'])

print(central_tendency)

import seaborn as sns
import matplotlib.pyplot as plt

variables_categorielles = ['Marital status', 'Application mode', 'Course', 'Daytime/evening attendance', 'Nationality', 'Target']

for variable in variables_categorielles:
    # Check if the column exists in the DataFrame
    if variable in df.columns:
        plt.figure(figsize=(10, 6))
        sns.countplot(x=variable, data=df)
        plt.title(f'Distribution de Fréquence de {variable}')
        plt.xticks(rotation=45, ha='right')
        plt.show()
    else:
        print(f"Column '{variable}' not found in the DataFrame.")

# Countplot pour visualiser les qualifications antérieures par statut
plt.figure(figsize=(12, 8))
sns.countplot(data=df, x='Previous qualification', hue='Target', palette='viridis')
plt.title('Qualifications antérieures par statut')
plt.xlabel('Qualification précédente')
plt.ylabel('Nombre d\'étudiants')
plt.legend(title='Statut', loc='upper right')
plt.xticks(rotation=45)
plt.show()

# Scatterplot pour examiner la relation entre le taux de chômage et le taux d'inflation
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Unemployment rate', y='Inflation rate', hue='Target', style='Target', s=100)
plt.title('Taux de chômage vs Taux d\'inflation selon le statut')
plt.xlabel('Taux de chômage (%)')
plt.ylabel('Taux d\'inflation (%)')
plt.legend(title='Statut')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# Ignorer les avertissements
warnings.filterwarnings('ignore')

# Charger les données dans un DataFrame (remplacer par votre propre fichier)
df = pd.read_csv('student_data.csv',sep=';')

# 1. Répartition des résultats académiques (Dropout vs Graduate)
plt.figure(figsize=(8, 6))
sns.countplot(x='Target', data=df, palette='viridis')
plt.title('Répartition des résultats académiques', fontsize=16)
plt.xlabel('Résultat', fontsize=12)
plt.ylabel('Nombre d\'étudiants', fontsize=12)
plt.show()

# 2. Qualification antérieure (note) et résultat académique (Boxplot)
plt.figure(figsize=(8, 6))
sns.boxplot(x='Target', y='Previous qualification (grade)', data=df, palette='Set2')
plt.title('Distribution des notes de qualification antérieure par résultat académique', fontsize=16)
plt.xlabel('Résultat académique', fontsize=12)
plt.ylabel('Note de qualification antérieure', fontsize=12)
plt.show()

# 3. Présence en journée/en soirée vs Résultat académique (Diagramme à barres empilées)
plt.figure(figsize=(8, 6))
sns.countplot(x='Daytime/evening attendance\t', hue='Target', data=df, palette='muted')
plt.title('Résultat académique selon la présence en journée/en soirée', fontsize=16)
plt.xlabel('Présence en journée/en soirée', fontsize=12)
plt.ylabel('Nombre d\'étudiants', fontsize=12)
plt.legend(title='Résultat académique')
plt.show()

# 4. Taux de chômage vs Résultat académique (Nuage de points)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Unemployment rate', y='GDP', hue='Target', data=df, palette='coolwarm', s=100)
plt.title('Taux de chômage vs PIB et résultat académique', fontsize=16)
plt.xlabel('Taux de chômage (%)', fontsize=12)
plt.ylabel('PIB (%)', fontsize=12)
plt.show()

# 5. Qualification des parents et réussite académique (Heatmap)
pivot_data = df.pivot_table(values='Previous qualification (grade)',
                            index='Mother\'s qualification',
                            columns='Father\'s qualification',
                            aggfunc='mean')
# 5. Qualification des parents et réussite académique (Heatmap)
plt.figure(figsize=(10, 8))
sns.heatmap(pivot_data, annot=True, cmap='YlGnBu', fmt=".1f")
plt.title('Heatmap : Qualification des parents et notes de qualification antérieure', fontsize=16)
plt.xlabel('Qualification du père', fontsize=12)
plt.ylabel('Qualification de la mère', fontsize=12)
plt.show()